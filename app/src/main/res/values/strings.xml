<resources>
    <string name="app_name">My Leet Code Solutions</string>

    <!--Add Two Numbers-->
    <string name="add_two_numbers_code">
<![CDATA[
<!DOCTYPE html>
<p>&#160; &#160; fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {</p>
<p>&#160; &#160; &#160; &#160; if (l1 == null &amp;&amp; l2 == null)</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; return null</p>
<p>&#160; &#160; &#160; &#160; var sum = 0</p>
<p>&#160; &#160; &#160; &#160; l1?.let { sum += l1.`val` }</p>
<p>&#160; &#160; &#160; &#160; l2?.let { sum += l2.`val` }</p>
<p>&#160; &#160; &#160; &#160; val result = ListNode(sum % 10)</p>
<p>&#160; &#160; &#160; &#160; result.next = addTwoNumbers(l1?.next, l2?.next)</p>
<p>&#160; &#160; &#160; &#160; if (sum / 10 &gt;= 1)</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; result.next = addTwoNumbers(result.next, ListNode(1))</p>
<p>&#160; &#160; &#160; &#160; return result</p>
<p>&#160; &#160; }</p>
]]>
    </string>
    <string name="add_two_numbers_description">You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
    You may assume the two numbers do not contain any leading zero, except the number 0 itself.</string>
    <string name="add_two_numbers_l1_x">l1 = %s</string>
    <string name="add_two_numbers_l2_x">l2 = %s</string>
    <string name="add_two_numbers_title">Add Two Numbers</string>

    <!--Common-->
    <string name="common_input_x">Input:\n%s</string>
    <string name="common_output_x">Output:\n%s</string>
    <string name="common_run">Run</string>

    <!--QuestionVO-->
    <string name="question_vo_add_two_numbers">Add Two Numbers</string>
    <string name="question_vo_two_sum">Two Sum</string>

    <!--Sample-->
    <string name="sample_text">Sample Text</string>

    <!--Two Sum-->
    <string name="two_sum_code">
<![CDATA[
<!DOCTYPE html>
<p>&#160; &#160; fun twoSum(numbers: IntArray, target: Int): IntArray {</p>
<p>&#160; &#160; &#160; &#160; val map = HashMap&lt;Int, Int&gt;()</p>
<p>&#160; &#160; &#160; &#160; numbers.forEachIndexed{</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; index, num -&gt;</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; map[target - num]?. let {</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; return intArrayOf(index, it)</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; }</p>
<p>&#160; &#160; &#160; &#160; &#160; &#160; map[num] = index</p>
<p>&#160; &#160; &#160; &#160; }</p>
<p>&#160; &#160; &#160; &#160; throw IllegalStateException(&quot;No solution!&quot;)</p>
<p>&#160; &#160; }</p>
]]>
    </string>
    <string name="two_sum_description">Given an array of integers numbers and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.</string>
    <string name="two_sum_numbers_x">numbers = %s</string>
    <string name="two_sum_target_x">target = %s</string>
    <string name="two_sum_title">Two Sum</string>
</resources>